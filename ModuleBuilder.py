"""/
ModuleBuilder. Build Python data from c files

Created on April 26, 2021

@author Eric Mader
"""

from datetime import datetime
import os
import re

# d = re.findall(r"UBiDiProps ubidi_props_singleton=\{\n([-+a-zA-Z0-9_{}, \n]*)", csource)[0]
# t = re.findall(r"\{\n(.+?)\}", d, re.DOTALL)[0]
# t.split(",\n")

def generateHeader(moduleName, fromList):
    todayString = datetime.now().astimezone().strftime("%B %_d, %Y at %I:%M:%S %p %Z")
    toolName = os.path.basename(__file__)
    fromNames = ", ".join(fromList)
    header = f'''"""/
{moduleName}, based on {fromNames} from ICU

Generated by {toolName} on {todayString}
"""'''
    return header

def cArrayToPython(csource, arrayName):
    pattern = arrayName + r"\[.+?\]=\{(.+?)\};"
    final = ""
    carray = re.findall(pattern, csource, re.DOTALL)[0]

    if carray.endswith("\n"):
        carray = carray[:-1].replace("\n", "\n    ")
        final = "\n"

    return f"{arrayName} = [{carray}{final}]"

def getPropsDeclaration(name, csource):
    pattern = name + r"=\{\n(.+?)\n\};"
    return re.findall(pattern, csource, re.DOTALL)[0]

def getTrieDeclaration(source):
    trieDeclaration = re.findall(r"\{\n(.+?)\}", source, re.DOTALL)[0]
    return trieDeclaration.split(",\n")

def trieValues(trie, prefix):
    dict = {3: "index_length", 5: "index_2_null_offset", 6: "data_null_offset", 9: "high_start", 10: "high_value_index"}
    values = []

    for index, name in dict.items():
        values.append(f"{prefix}_{name} = {trie[index].strip()}")

    return values

def test():
    cfile = open("/Users/emader/icu/icu/icu4c/source/common/ubidi_props_data.h")
    csource = cfile.read()

    print(generateHeader("BidiPropsData.py", ["ubidi_props_data.h"]))
    print()
    print(cArrayToPython(csource, "ubidi_props_indexes"))
    print()
    print(cArrayToPython(csource, "ubidi_props_trieIndex"))
    print()
    print(cArrayToPython(csource, "ubidi_props_mirrors"))
    print()
    print(cArrayToPython(csource, "ubidi_props_jgArray"))
    print()
    print(cArrayToPython(csource, "ubidi_props_jgArray2"))
    print()

    trie = getTrieDeclaration(getPropsDeclaration("ubidi_props_singleton", csource))
    values = trieValues(trie, "ubidi_props_trie")
    for value in values:
        print(value)

    print("\n")
    uchar_props_data_h = open("/Users/emader/icu/icu/icu4c/source/common/uchar_props_data.h").read()
    props_trie = getPropsDeclaration("propsTrie", uchar_props_data_h)
    props_trie_values = trieValues(props_trie.split(",\n"), "propsTrie")
    for value in props_trie_values:
        print(value)

    print("\n")
    propsVector_trie = getPropsDeclaration("propsVectorsTrie", uchar_props_data_h)
    propsVector_trie_values = trieValues(propsVector_trie.split(",\n"), "propsVectorTrie")
    for value in propsVector_trie_values:
        print(value)

if __name__ == "__main__":
    test()
