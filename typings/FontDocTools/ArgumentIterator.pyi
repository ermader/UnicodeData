"""
This type stub file was generated by pyright.
"""

import typing

from FontDocTools.Types import Percentage
 

"""\
Provides the ArgumentIterator class, which helps parse argument
lists where options can have variable numbers of extra arguments.
"""
class ArgumentIterator:
    """\
    Helps parse argument lists where options can have variable numbers of
    extra arguments.

    Options are arguments with initial “--”; extra arguments are those without.

    ArgumentIterator can be used as an iterator in a for loop,
    but expects that extra arguments are processed in the body of the
    for loop, and that only options are returned via __iter__.
    """
    def __init__(self, arguments: list[str]) -> None:
        """\
        Constructs an ArgumentIterator to iterate over arguments.

        When using sys.argv, item 0 must have been removed from the list.
        """
        ...
    
    def nextOption(self) -> str:
        """\
        Returns the next option argument.
        Raise StopIteration if there’s no more argument.
        Raise ValueError if the next argument doesn’t start with “--”.
        """
        ...
    
    def nextExtra(self, valueName: str) -> str:
        """\
        Returns the next extra argument.
        Raise ValueError if there’s no more argument, or if the next
        argument starts with “--”.
        """
        ...
    
    def nextExtraAsFont(self, valueName: str) -> tuple[str, typing.Optional[str]]:
        """\
        Returns a tuple (fontFile, fontName).
        The font file is taken from the first extra argument.
        If the font file name ends in “.ttc”, the font name is taken from
        the second extra argument; otherwise it is None.
        Raises ValueError if there’s no more argument, or if the next
        argument starts with “--”, or if it’s not a valid file name,
        or if there’s no font name along with a font file name ending in “.ttc”.
        """
        ...
    
    def nextExtraAsPosInt(self, valueName: str, percentageAllowed: bool = ...) -> typing.Union[int, Percentage]:
        """\
        Returns the next extra argument as a positive integer.
        If percentageAllowed is True, then percentage literals are allowed, and will
        be returned as instances of the Percentage class.
        Raise ValueError if there’s no more argument, or if the next
        argument starts with “--”, or if it’s not a positive integer value.
        """
        ...
    
    def nextExtraAsNumber(self, valueName: str) -> typing.Union[int, float]:
        """\
        Returns the next extra argument as a number.
        Raise ValueError if there’s no more argument, or if the next
        argument starts with “--”, or if it’s not a number.
        """
        ...
    
    def hasExtra(self) -> bool:
        """\
        Checks if there is another extra argument.
        """
        ...
    
    def remainingExtras(self) -> list[str]:
        """\
        Returns a list with any remaining extra arguments.
        """
        ...
    
    def __next__(self) -> str:
        """\
        Returns the next option argument.
        Raise StopIteration if there’s no more argument.
        Raise ValueError if the next argument doesn’t start with “--”.
        """
        ...
    
    def __iter__(self) -> typing.Iterator[str]:
        """\
        Returns an iterator for this object.
        """
        ...
    


